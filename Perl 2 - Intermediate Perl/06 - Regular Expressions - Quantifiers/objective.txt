6. Regular Expressions: Quantifiers

Objective

The file calculate.pl contains an implementation of the final exercise of the Beginning Perl course, a primitive calculator operating on a running accumulator.

If you don't have the file from the Perl 1 course, copy it from here and save it in your homework folder as calculate2.pl:

#!/usr/bin/perl
use strict;
use warnings;

my $INVALID = "Invalid statement\n";
my $Accumulator;

while ( print( "> " ) && defined( my $line = <> ) )
{
  chomp $line;
  my $ok;
  ($ok, $Accumulator) = execute( $line, $Accumulator );
  if ( $ok )
  {
    print "OK\n";
  }
  else
  {
    warn $INVALID;
  }
}

sub execute
{
  my ($line, $current) = @_;

  if ( length $line == 0 )
  {
    return;
  }
  my $operator_length = index $line, ' ';
  if ( $operator_length < 0 )
  {
    return monadic( $line, $current );
  }
  else
  {
    unless ( defined $current )
    {
      die "Accumulator has not been set\n";
    }
    my $operator = substr $line, 0, $operator_length;
    my $operand = substr $line, $operator_length + 1;
    return dyadic ( $operator, $operand, $current );
  }
}

sub monadic
{
  my ($operator, $current) = @_;

  if ( $operator eq 'EQUALS' )
  {
    if ( defined $current )
    {
      print " = $current\n";
    }
    else
    {
      print " (undefined)\n";
    }
    return ( 1, $current );
  }
  elsif ( $operator eq 'CLEAR' )
  {
    return ( 1, 0 );
  }
  return;
}

sub dyadic
{
  my ( $operator, $operand, $current) = @_;

  if ( $operator eq 'PLUS' )
  {
    return ( 1, $current + $operand );
  }
  elsif ( $operator eq 'MINUS' )
  {
    return ( 1, $current - $operand );
  }
  elsif ( $operator eq 'TIMES' )
  {
    return ( 1, $current * $operand );
  }
  elsif ( $operator eq 'OVER' )
  {
    return ( 1, $current / $operand );
  }
  return;
}

A sample dialog illustrates its mode of operation:

> EQUALS
 (undefined)
OK
> CLEAR
OK
> EQUALS
 = 0
OK 
> PLUS 42
OK
> EQUALS
 = 42
OK
> OVER 7
OK
> TIMES 3
OK
> MINUS 3
OK
> EQUALS
 = 15
OK
> explode
Invalid statement
> 

Enhance the program to check that the number entered is a valid integer or floating point number, optionally prefixed by a plus or minus sign, and output an error if it does not match. When you finish, submit calculate2.pl.